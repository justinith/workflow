//put the interpreter into strict mode
"use strict";

//create a new Firebase application using the Firebase
//console, https://console.firebase.google.com/

//setup OAuth with GitHub
//- on Firebase, enable the GitHub sign-in method
//- go to GitHub, and go to your account settings
//- under Developer Settings on the left, choose OAuth applications
//- fill out the form, setting the Authorization Callback URL
//  to the URL provided by Firebase
//- Copy the Client ID and Client Secret generated by GitHub
//  into the Firebase dialog for the GitHub sign-in method  

//paste the Firebase initialization code here
// Initialize Firebase
var config = {
    apiKey: "AIzaSyAmbFL7kaTq6RlSBRMjK6HfUHoAiDOGMQw",
    authDomain: "tasks-demo-53901.firebaseapp.com",
    databaseURL: "https://tasks-demo-53901.firebaseio.com",
    storageBucket: "tasks-demo-53901.appspot.com",
    messagingSenderId: "581577071291"
};
firebase.initializeApp(config);

//will be set to the currently authenticated user
var currentUser;
//the GitHub authentication provider for Firebase
var authProvider = new firebase.auth.GithubAuthProvider();

//ask Firebase to call a function whenever the authentication
//state changes. This happens when the page first loads, or
//after the user signs-in, or after the user signs-out.
//The `user` parameter will either be an authenticated
//user for your Firebase application, or undefined if
//the user is not signed-in.
firebase.auth().onAuthStateChanged(function(user) {
    //if there is an authenticated user...
    if (user) {
        //hold on to that using our `currentUser` global variable
        currentUser = user;
    } else {
        //ask Firebase to redirect us to GitHub so that the
        //user can sign in. This will make the browser 
        //navigate over to GitHub, and unload this page.
        //After the user signs-in on GitHub, the browser
        //will navigate back to this page, and this function
        //will be called, passing the authenticated user information
        //as the `user` parameter
        firebase.auth().signInWithRedirect(authProvider);
    }
});

//get a reference to the new task form, the input in that form
//and the <ul> element where we will show our tasks
var taskForm = document.querySelector(".new-task-form");
var taskTitleInput = taskForm.querySelector(".new-task-title");
var taskList = document.querySelector(".task-list");


function renderTask(snapshot) {
    var task = snapshot.val();
    var li = document.createElement("li");
    
    var spanTitle = document.createElement("span");
    spanTitle.textContent = task.title;
    spanTitle.classList.add("task-title");
    li.appendChild(spanTitle);

    spanTitle.addEventListener("click", function() {
        snapshot.ref.update({
            done: !task.done
        });
    });

    var spanCreation = document.createElement("span");
    spanCreation.textContent = moment(task.createdOn).fromNow() + 
        " by " + 
        (task.createdBy.displayName || task.createdBy.email); 

    spanCreation.classList.add("task-creation");
    li.appendChild(spanCreation);

    if (task.done) {
        li.classList.add("done");
        var buttonDelete = document.createElement("span");
        buttonDelete.classList.add("glyphicon", "glyphicon-trash");

        buttonDelete.addEventListener("click", function(evt) {
            snapshot.ref.remove();
        });

        li.appendChild(buttonDelete);
    }

    taskList.appendChild(li);
}


 
function render(snapshot) {
    //clear any elements that might already be in the <ul>
    
    taskList.innerHTML = "";
    //render each of the tasks
    snapshot.forEach(renderTask);
}

tasksRef.on("value", render);


course[
    project[
        duedate: Dec 6th,
        done: false,
        createdBy{
            mainuser: email,
            user[
                email1,
                email2
            ]
        }
        phase1[
            task1{
                duedate: Dec 4,
                assignto: email,
                done:false,
                content: string
            }
            task2{
                duedate: Dec 4,
                assignto: email,
                done:false,
                content: string
            }
        ]
    ]
]
dataRef = firebase.database().ref(course);
var task = {
                comment: {
                    title: taskTitleInput.value.trim(),
                    update: false,
                    channel: channel,
                    createdOn: firebase.database.ServerValue.TIMESTAMP,
                },
                //when created, filled in by Firebase
                createdBy: {
                    uid: currentUser.uid,                   //the unique user id
                    displayName: currentUser.displayName,   //the user's display name
                    email: currentUser.email,                //the user's email address
                    photoUrl: currentUser.photoURL
                }
            };
                dataRef.push(message);